{
  "name": "harp-static",
  "version": "0.1.0",
  "description": "Simple static server for harp.js",
  "main": "lib",
  "bin": {
    "harp-static": "./bin/harp-static.js"
  },
  "engines": {
    "node": "0.10.x",
    "npm": "1.3.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/remy/harp-server.git"
  },
  "author": {
    "name": "Remy Sharp"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "st": "~0.4.1",
    "glob": "~3.2.8"
  },
  "readme": "Harp Static\n===========\n\nSimple Harp.js static server.\n\nWith Harp.js, if you want your source content files to work as a static\ngenerated site, then you *must* refer to urls using `.html`.\n\nI don't like this.\n\nSo this script quite simply creates a static server (that caches assets), and\nmaps normal Harp urls (i.e. without an extension on `.html`) and maps them to\nreal files.\n\nNow you can use non-static for development, and static for live (deployed to\nHeroku, etc).\n\nExample of usage (and in fact, how I'm using `harp-static`):\n\n```js\n'use strict';\nvar harp = require('harp');\nvar server = require('harp-static');\nvar outputPath = __dirname + '/www';\nvar port = process.env.PORT || 9000;\n\nharp.compile(__dirname, outputPath, function (errors){\n  if (errors) {\n    console.log(JSON.stringify(errors, null, 2));\n    process.exit(1);\n  }\n\n  console.log('Running harp-static on ' + port);\n  server(outputPath, port);\n});\n```\n",
  "bugs": {
    "url": "https://github.com/remy/harp-server/issues"
  },
  "homepage": "https://github.com/remy/harp-server",
  "_id": "harp-static@0.1.0",
  "_from": "harp-static@"
}
